 			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Michael Malek <mjmalek218@protonmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


NEW VARIABLE DECLARATION: "struct list timer_sleep_list;"

PURPOSE: This declaration was added to thread.h. It is a global list
	 meant to keep track of all threads that have put themselves to sleep. 

NEW VARIABLE DECLARATION: "struct thread* sleeping_thread"

PURPOSE: Added to thread.c. Simply a handle to the current sleeping thread in
the iteration over timer_sleep_list.

NEW VARIABLE DECLARATION: "struct list_elem* e"

PURPOSE: Added to thread.c, just used to iterate over timer_sleep_list when 
updating sleep_ticks of each sleeping thread. 

CHANGED STRUCT: (note: only the added field is shown in the struct


	"struct thread
	{
	        ...everything else is kept. the addition is noted below:

		/* The number of ticks left for the thread to sleep, when it
		puts itself to sleep with a timer_sleep call. reset
		at every timer_sleep call. */
		int64_t sleep_ticks;
	};"

PURPOSE:


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

First interrupts are disabled. Then the current thread's struct
is pushed onto a global list of sleeping threads, and a field I added to each thread 
struct, called sleep_ticks (described above), is set to the number of ticks remaining
(on first iteration, this is just the argument "ticks" to the function, unless
a timer interrupt occurs between the intialization of "start" and the disabling
of interrupts).  Finally the thread is blocked. When the thread is eventually
unblocked by the timer_handler, it is put on the ready queue. When it runs it puts
interrupts at the level they were prior to calling timer_sleep, and continues execution.

The reason this occurs in a while loop is because I'm afraid that, if the scheduler
were for to some reason wake the thread that put itself to sleep up, it could 
potentially sleep for less time than it is supposed to. The way things are, the 
thread is guaranteed to be disabled for at least the number of ticks it wanted to
be. 

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

What are the additional steps that *must* occur in the timer interrupt
handler?

	-- All sleep ticks for all sleeping threads *must* be decremented
	   and then checked for zero

	-- If one reaches 0, remove the sleeping thread from the list of 
	   threads that have put themselves to sleep, and *unblock* the thread
	   (i.e. don't run it just put it on the ready queue)

Thus, the best way we could minimize time spent in the timer interrupt handler
is *only* adding the above steps to the handler, and performing them efficiently,
which is what we did.  

One way I could have potentially made this faster was by
maintaining simply some sort of array of the ticks, and rather than iterating over
points in a list object we could simply just iterate through the array
decrementing each amount of ticks, but I didn't think the added complexity
of allocating separate memory for the array and re-sizing this memory every now
and then would be worth the amoritzed performance benefits. 

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

At my first shot at implementation of timer_sleep(), I attempted to use
synchronization primitives (lock + condition variable to signal to a sleeping thread
to wake up). I realized, however, that synchronization of access to the timer_sleep_list
needs to occur not only amongst threads putting themselves to sleep, but also the timer    
interrupt handler, which cannot be controlled by locks. 

Thus, to answer the question, I just disabled interrupts in timer_sleep.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Again, the only way that I could think to do this was by disabling interrupts, since
the interrupt handler cannot sleep/employ synchronization primitives. 

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

The design above was the simplest, bare-bone design I could think of. As discussed
in several of the answers above, there were two alterations I considered:

   1. Using locks to control access to the timer_sleep list, and 

   2. Using an array of timer ticks remaining for each thread, and a linked list
   of struct threads, as opposed to putting the ticks remaining as a field in the 
   struct threads, so we could operatore primarily out of an array and use a linked
   list only when necessary (the former being faster)

In the case of (1.), the idea simply was not feasible as explained in A.4. In the case
of (2.), the increased complexity of attempting to implement such a solution for  
a marginal amortized performance benefit was simply not worth it (also explained in A.3),
as it would have required allocating+dynamically resizing the array of ticks. 


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

nothing changed so far (might be different for priority donation)

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

again nothing changed so far, but this will have to change 

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

In the Pintos base code, locks are built upon semaphores, so altering the code
so that in a semaphore locks are woken up first nturally changes how locks
function as well.

As for condition variables, 

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

